//%GenSrc:1:a6ayg9qnp0ybW13ptOoT8A
/*
 * This code was generated by InstinctAI.
 *
 * It is safe to edit this file.
 */

namespace instinctai.usr.behaviours
{
    using UnityEngine;
    using com.kupio.instinctai;

    public partial class Person : MonoBehaviour
    {
        public float IdealTemp;
        public float Sensitivity;

        public bool hasRemote;
        public bool isUpset;

        public Vector3 TargetLoc;
        public Vector3 SearchDir;

        public Vector3 LightLoc;
        public Vector3 RemoteLoc;

        public LightSwitch Light;
        public ACRemote ACRemote;
        public Temperature Temperature;
        public PersonTracker pt;
        public Bed bed;


        public bool IsLightOn()
        {
            Debug.Log("Checking if Light is On");
            if (Light.LightOn == true)
            {
                Debug.Log("Light is On");
                return true;
            }
            else
            {
                Debug.Log("Light is Off");
                return false;
            }
        }


        public bool IsUpset()
        {
            Debug.Log("Checking If Upset");
            if ((Temperature.Temp > IdealTemp + Sensitivity) || (Temperature.Temp < IdealTemp - Sensitivity) || (Light.LightOn == true))
            {
                Debug.Log("Upset is True");
                isUpset = true;
                return true;
            }
            else
            {
                Debug.Log("Upset is False");
                isUpset = false;
                return false;
            }
        }

        public bool AreYouInBed()
        {
            Debug.Log("Checking if in Bed");
            if (transform.position == bed.transform.position)
            {
                Debug.Log("Is in Bed");
                return true;
            }
            else
            {
                Debug.Log("Not In Bed");
                return false;
            }
        }

        public bool isTempGood()
        {
            Debug.Log("Checking if Temp is Good");
            if ((Temperature.Temp > IdealTemp + Sensitivity) || (Temperature.Temp < IdealTemp - Sensitivity))
            {
                Debug.Log("Temp is not Good");
                return false;
            }
            else
            {
                Debug.Log("Temp is Good");
                return true;
            }
        }

        public bool isACGood()
        {
            Debug.Log("Checking if AC is Correct");
            if(((Temperature.Temp > IdealTemp - Sensitivity) && ACRemote.ACOn) || (Temperature.Temp < IdealTemp + Sensitivity) && !ACRemote.ACOn)
            {
                Debug.Log("AC is Good");
                return true;
            }
            else
            {
                Debug.Log("AC is Bad");
                return false;
            }

        }

        public Vector3 RemoteLocation()
        {
            Debug.Log("Finding Remote Location");
            return ACRemote.transform.position;
        }

        public NodeVal ChangeAC()
        {
            Debug.Log("Changing AC");
            if (Temperature.Temp > IdealTemp)
            {
                Debug.Log("AC now On");
                ACRemote.ACOn = true;
            }
            else
            {
                Debug.Log("AC now Off");
                ACRemote.ACOn = false;
            }
            return NodeVal.Success;
        }

        public NodeVal ThrowRemote()
        {
            Debug.Log("Throwing Remote");
            ACRemote.transform.parent = null;
            ACRemote.transform.position = new Vector3(Random.Range(-8, 8), Random.Range(-4, 4));
            hasRemote = false;
            return NodeVal.Success;
        }

        public NodeVal IsLight()
        {
            Debug.Log("Checking if Light is On (Node Val Version");
            if(Light.LightOn == true)
            {
                Debug.Log("Light is On (Node Val)");
                return NodeVal.Success;
            }
            else
            {
                Debug.Log("Light is Off (Node Val)");
                return NodeVal.Fail;
            }
        }

        public NodeVal FindBed()
        {
            Debug.Log("Finding Bed");
            TargetLoc = new Vector3(bed.transform.position.x, bed.transform.position.y, -1);
            return NodeVal.Success;
        }

        public NodeVal FindRemote()
        {
            Debug.Log("Finding Remote");
            TargetLoc = new Vector3(ACRemote.transform.position.x, ACRemote.transform.position.y, -1);
            return NodeVal.Success; 
        }

        public NodeVal Search()
        {
            Debug.Log("Choosing Search Direction");
            float newX = Random.Range(-8f, 8f);
            float newY = Random.Range(-4f, 4f);
            Debug.Log("Searching at" + newX + "," + newY);
            SearchDir = new Vector3(newX, newY, -1);
            return NodeVal.Success;
        }

        public Vector3 SearchLoc()
        {
            Debug.Log("Choosing Search Direction");
            float newX = Random.Range(-8f, 8f);
            float newY = Random.Range(-4f, 4f);
            Debug.Log("Searching at" + newX + "," + newY);
            SearchDir = new Vector3(newX, newY, -1);
            return SearchDir;
        }

        public NodeVal LightRemotePos()
        {
            Debug.Log("Remote and Light Check");
            LightLoc = Light.transform.position;
            RemoteLoc = new Vector3(ACRemote.transform.position.x, ACRemote.transform.position.y, -1);
            return NodeVal.Success;
        }

        public NodeVal FindLight()
        {
            Debug.Log("Finding Light");
            TargetLoc = new Vector3(Light.transform.position.x, Light.transform.position.y, -1);
            return NodeVal.Success;
        }

        public NodeVal TurnOnLight()
        {
            Debug.Log("Turning on Light");
            Light.LightOn = true;
            return NodeVal.Success;
        }

        public NodeVal TurnOffLight()
        {
            Debug.Log("Turning off Light");
            Light.LightOn = false;
            return NodeVal.Success;
        }

        public NodeVal PickUpRemote()
        {
            Debug.Log("Picking Up Remote");
            ACRemote.transform.parent = transform;
            hasRemote = true;
            return NodeVal.Success;
        }
    }
}
