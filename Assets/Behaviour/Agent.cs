//%GenSrc:1:OWjeF04ylkiDo1x+raOSJg
/*
 * This code was generated by InstinctAI.
 *
 * It is safe to edit this file.
 */

namespace instinctai.usr.behaviours
{
    using UnityEngine;
    using com.kupio.instinctai;
    using System.Collections.Generic;


    public partial class Agent : MonoBehaviour
    {
        public Camera cam;
        public SpriteRenderer sr;
        public AgentTerror at;

        public Rigidbody2D rb;

        public Vector2 pos;
        public Vector2 mousepos;
        public Vector2 velocity;
        public Vector2 target;

        public float speed;

        public TextMesh tm;

        public float actionTime;
        public float textTime;

        public float force;

        public bool isActive;
        public bool Activated;
        public bool isTop;
        public bool ReturnToSafety = false;
        public bool DontMove = false;

        public CandyBag[] candyBag;
        List<int> prefBag = new List<int>();

        public float activationThreshold;

        public int anger;
        public int horror;
        public bool angry = false;
        public bool scared;
        public int greed;
        public int takenCandy;
        public int leaveChoice;

        public GameObject PP;
        public GameObject BB;
        public GameObject HS;
        public GameObject RW;
        public GameObject SP;

        public CandyStorage PPCS;
        public CandyStorage BBCS;
        public CandyStorage HSCS;
        public CandyStorage RWCS;
        public CandyStorage SPCS;

        public GameObject PPobj;
        public GameObject BBobj;
        public GameObject HSobj;
        public GameObject RWobj;
        public GameObject SPobj;

        public Color PPcolor;
        public Color BBcolor;
        public Color HScolor;
        public Color RWcolor;
        public Color SPcolor;



        public void Awake()
        {
            ComponentGetter();
            CheckIfTop();
            FillPrefBag();
            GenerateCandy();
            GetCandyObj();
            GenerateHorrorHyperGreed();
            leaveChoice = Random.Range(0, 1000);
        }


        public void LateUpdate()
        {
            at.SetTerror(horror, anger);
            float choosen = Mathf.Max(candyBag[0].CandyAmount, candyBag[1].CandyAmount, candyBag[2].CandyAmount, candyBag[3].CandyAmount, candyBag[4].CandyAmount);
            if (choosen == candyBag[0].CandyAmount)
            {
                sr.color = PPcolor;
            }
            if (choosen == candyBag[1].CandyAmount)
            {
                sr.color = BBcolor;
            }
            if (choosen == candyBag[2].CandyAmount)
            {
                sr.color = HScolor;
            }
            if (choosen == candyBag[3].CandyAmount)
            {
                sr.color = RWcolor;
            }
            if (choosen == candyBag[4].CandyAmount)
            {
                sr.color = SPcolor;
            }

        }

        public void FixedUpdate()
        {
            if (isActive && !DontMove)
            {
                MoveToTarget();
                rb.MovePosition((Vector2)transform.position + velocity);
            }
            actionTime--;

            if (textTime > 0)
            {
                TextTimer();
            }

            activationThresholdGenerator();
            Vector2Mypos();
            Vector2MyMouse();
        }

        public void OnCollisionEnter2D(Collision2D col)
        {

            //if (col.gameObject.tag == "Wall")
            //{
            //    Vector2 dir = col.contacts[0].point - pos;
            //    dir = -dir.normalized;
            //    velocity = dir * 0.01f;
            //    actionTime = 20;
            //    ReturnToSafety = true;
            //}
        }

        void OnTriggerEnter2D(Collider2D trig)
        {
            if (trig.gameObject.tag == "KillAgent")
            {
                Destroy(this.gameObject);
            }

            if (trig.gameObject.tag == "ActivateAgent")
            {
                if (isActive == true)
                {
                    isActive = false;
                    if (scared == false)
                    {
                        GameManager.me.scaredChildren--;
                    }
                    if (angry == false)
                    {
                        GameManager.me.angryChildren--;
                    }
                }
            }

            if (trig.gameObject.tag == "Judas")
            {
                if (!scared)
                {
                    JudasSpeak();
                }
            }

            if (trig.gameObject.tag == "ScareZone")
            {
                DropCandy();
                scared = true;
                if(isActive == false)
                {
                    Activated = true;
                }
                speed *= 2;
                horror += (Random.Range(30, 60));
                if(angry)
                {
                    anger *= 2;
                }
                int j = Random.Range(1, 6);
                if (j == 1)
                {
                    SpecificSpeech("AHHHH!", 240);
                }
                if (j == 2)
                {
                    SpecificSpeech("I'm getting out of here!", 240);
                }
                if (j == 3)
                {
                    SpecificSpeech("Too spooky for me!", 240);
                }
                if (j == 4)
                {
                    SpecificSpeech("RUN!!!!!!!", 240);
                }
                if (j == 5)
                {
                    SpecificSpeech("What the hell was that!", 240);
                }
            }
        }

        void OnTriggerStay2D(Collider2D trig)
        {
            if (trig.gameObject.tag == "ActivateAgent")
            {
                ActivateAgent();
            }
        }

        public void MoveToTarget()
        {
            if (!DontMove)
            {
                Vector2 tempVel = target - pos;
                tempVel.Normalize();
                tempVel *= speed;
                velocity = tempVel;
            }
        }

        public NodeVal ChooseDirTime()
        {
            velocity = new Vector2(Random.Range(-0.03f, 0.03f), Random.Range(-0.03f, 0.03f));
            actionTime = Random.Range(60, 270);
            return NodeVal.Success;
        }

        public NodeVal SetTargetToPP()
        {
            target = PP.transform.position;
            CheckDontMove();
            return NodeVal.Success;
        }

        public NodeVal TakeCandyFromPP()
        {
            if (PPCS.Amount > 0)
            {
                int i = Random.Range(1, 5);
                PPCS.Amount -= i;
                if (PPCS.Amount < 0)
                {
                    PPCS.Amount = 0;
                }
                candyBag[0].CandyAmount--;
                GameManager.me.candyFed += i;
                SpecificSpeech("I got " + i + " PitPats!", 240);
            }
            else
            {
                GameManager.me.angryChildren++;
                SpecificSpeech("There arn't any PitPats left!", 240);
                angry = true;
                SetAnger(0);
            }
            takenCandy++;
            return NodeVal.Success;
        }

        public NodeVal SetTargetToBB()
        {
            target = BB.transform.position;
            CheckDontMove();
            return NodeVal.Success;
        }

        public NodeVal TakeCandyFromBB()
        {
            if (BBCS.Amount > 0)
            {
                int i = Random.Range(1, 5);
                BBCS.Amount -= i;
                if (BBCS.Amount < 0)
                {
                    BBCS.Amount = 0;
                }
                candyBag[1].CandyAmount--;
                GameManager.me.candyFed += i;
                SpecificSpeech("I got " + i + " Booster Bars!", 240);
            }
            else
            {
                SpecificSpeech("There arn't any Booster Bars left!", 240);
                GameManager.me.angryChildren++;
                angry = true;
                SetAnger(1);
            }
            takenCandy++;
            return NodeVal.Success;
        }

        public NodeVal SetTargetToRW()
        {
            target = RW.transform.position;
            CheckDontMove();
            return NodeVal.Success;
        }

        public NodeVal TakeCandyFromRW()
        {
            if (RWCS.Amount > 0)
            {
                int i = Random.Range(1, 5);
                RWCS.Amount -= i;
                if (RWCS.Amount < 0)
                {
                    RWCS.Amount = 0;
                }
                candyBag[2].CandyAmount--;
                GameManager.me.candyFed += i;
                SpecificSpeech("I got " + i + " Red and Whites!", 240);
            }
            else
            {
                GameManager.me.angryChildren++;
                SpecificSpeech("There arn't any Red and Whites left!", 240);
                angry = true;
                SetAnger(2);
            }
            takenCandy++;
            return NodeVal.Success;
        }

        public NodeVal SetTargetToHS()
        {
            target = HS.transform.position;
            CheckDontMove();
            return NodeVal.Success;
        }

        public NodeVal TakeCandyFromHS()
        {
            if (HSCS.Amount > 0)
            {
                int i = Random.Range(1, 5);
                HSCS.Amount -= i;
                if (HSCS.Amount < 0)
                {
                    HSCS.Amount = 0;
                }
                candyBag[3].CandyAmount--;
                GameManager.me.candyFed += i;
                SpecificSpeech("I got " + i + " Her-She's!", 240);
            }
            else
            {
                GameManager.me.angryChildren++;
                SpecificSpeech("There arn't any Her-She's left!", 240);
                angry = true;
                SetAnger(3);
            }
            takenCandy++;
            return NodeVal.Success;
        }

        public NodeVal SetTargetToSP()
        {
            target = SP.transform.position;
            CheckDontMove();
            return NodeVal.Success;
        }

        public NodeVal TakeCandyFromSP()
        {
            if (SPCS.Amount > 0)
            {
                int i = Random.Range(1, 5);
                SPCS.Amount -= i;
                if (SPCS.Amount < 0)
                {
                    SPCS.Amount = 0;
                }
                candyBag[4].CandyAmount--;
                GameManager.me.candyFed += i;
                SpecificSpeech("I got " + i + " SmallPleasers!", 240);
            }
            else
            {
                GameManager.me.angryChildren++;
                SpecificSpeech("There arn't any SmallPleasers left!", 240);
                angry = true;
                SetAnger(4);
            }
            takenCandy++;
            return NodeVal.Success;
        }

        public NodeVal SetTargetToLeave()
        {
            if (leaveChoice < 500)
            {
                target = new Vector2(-9, 0);
            }
            else
            {
                target = new Vector2(9, 0);
            }
            CheckDontMove();
            return NodeVal.Success;
        }

        public NodeVal SetTargetToStay()
        {
            DontMove = true;
            return NodeVal.Success;
        }

        void CheckDontMove()
        {
            if(DontMove)
            {
                DontMove = false;
            }
        }

        public bool CheckActionTime()
        {
            if (actionTime < 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool CheckIfGoHome()
        {
            if ((scared == true) || (takenCandy >= greed))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public Vector3 NonActiveDestination()
        {
            Vector3 des;
            if (isTop == true)
            {
                des = new Vector3(transform.position.x + (Random.Range(-0.75f, 0.75f)), -10);
            }
            else
            {
                des = new Vector3(transform.position.x + (Random.Range(-0.75f, 0.75f)), 10);
            }
            return des;
        }

        public float WantForPitPats()
        {
            float i = candyBag[0].CandyAmount * candyBag[0].CandyPreference * Random.Range(0.95f, 1.05f);
            return i;
        }

        public float WantForBoosterBars()
        {
            float i = candyBag[1].CandyAmount * candyBag[1].CandyPreference * Random.Range(0.95f, 1.05f);
            return i;
        }

        public float WantForHerShe()
        {
            float i = candyBag[2].CandyAmount * candyBag[2].CandyPreference * Random.Range(0.95f, 1.05f);
            return i;
        }

        public float WantForRedAndWhites()
        {
            float i = candyBag[3].CandyAmount * candyBag[3].CandyPreference * Random.Range(0.95f, 1.05f);
            return i;
        }

        public float WantForSmallPleasers()
        {
            float i = candyBag[4].CandyAmount * candyBag[4].CandyPreference * Random.Range(0.95f, 1.05f);
            return i;
        }

        public void SetAnger(int i)
        {
            if (candyBag[i].CandyPreference == 1)
            {
                anger += Random.Range(40, 60);
            }
            if (candyBag[i].CandyPreference == 2)
            {
                anger += Random.Range(35, 55);
            }
            if (candyBag[i].CandyPreference == 3)
            {
                anger += Random.Range(30, 50);
            }
            if (candyBag[i].CandyPreference == 4)
            {
                anger += Random.Range(25, 45);
            }
            if (candyBag[i].CandyPreference == 5)
            {
                anger += Random.Range(20, 40);
            }
        }

        public void DropCandy()
        {
            for (int i = 0; i < Random.Range(1, 5); i++)
            {
                float choosen = Mathf.Max(candyBag[0].CandyAmount, candyBag[1].CandyAmount, candyBag[2].CandyAmount, candyBag[3].CandyAmount, candyBag[4].CandyAmount);
                if (choosen == candyBag[0].CandyAmount)
                {
                    Instantiate(PPobj, new Vector2(transform.position.x + (Random.Range(-0.5f, 0.5f)), transform.position.y + (Random.Range(-0.5f, 0.5f))), Quaternion.identity);
                    candyBag[0].CandyAmount--;
                }
                if (choosen == candyBag[1].CandyAmount)
                {
                    Instantiate(BBobj, new Vector2(transform.position.x + (Random.Range(-0.5f, 0.5f)), transform.position.y + (Random.Range(-0.5f, 0.5f))), Quaternion.identity);
                    candyBag[1].CandyAmount--;
                }
                if (choosen == candyBag[2].CandyAmount)
                {
                    Instantiate(HSobj, new Vector2(transform.position.x + (Random.Range(-0.5f, 0.5f)), transform.position.y + (Random.Range(-0.5f, 0.5f))), Quaternion.identity);
                    candyBag[2].CandyAmount--;
                }
                if (choosen == candyBag[3].CandyAmount)
                {
                    Instantiate(RWobj, new Vector2(transform.position.x + (Random.Range(-0.5f, 0.5f)), transform.position.y + (Random.Range(-0.5f, 0.5f))), Quaternion.identity);
                    candyBag[3].CandyAmount--;
                }
                if (choosen == candyBag[4].CandyAmount)
                {
                    Instantiate(SPobj, new Vector2(transform.position.x + (Random.Range(-0.5f, 0.5f)), transform.position.y + (Random.Range(-0.5f, 0.5f))), Quaternion.identity);
                    candyBag[4].CandyAmount--;
                }

                //for (int i = 0; i < (Random.Range(1, 5)); i++)
                //{
                //    float PPwant = WantForPitPats() * Random.Range(0.85f, 1.15f);
                //    float BBwant = WantForBoosterBars() * Random.Range(0.85f, 1.15f);
                //    float HSwant = WantForHerShe() * Random.Range(0.85f, 1.15f);
                //    float RWwant = WantForRedAndWhites() * Random.Range(0.85f, 1.15f);
                //    float SPwant = WantForSmallPleasers() * Random.Range(0.85f, 1.15f);
                //    float choosen = Mathf.Max(PPwant, BBwant, HSwant, RWwant, SPwant);
                //    if(choosen == PPwant && candyBag[0].CandyAmount >= 0)
                //    {
                //        Instantiate(PPobj, new Vector2(transform.position.x + (Random.Range(-0.5f, 0.5f)), transform.position.y + (Random.Range(-0.5f, 0.5f))), Quaternion.identity);
                //        candyBag[0].CandyAmount--;
                //    }
                //    if (choosen == BBwant && candyBag[1].CandyAmount >= 0)
                //    {
                //        Instantiate(BBobj, new Vector2(transform.position.x + (Random.Range(-0.5f, 0.5f)), transform.position.y + (Random.Range(-0.5f, 0.5f))), Quaternion.identity);
                //        candyBag[1].CandyAmount--;
                //    }
                //    if (choosen == HSwant && candyBag[2].CandyAmount >= 0)
                //    {
                //        Instantiate(HSobj, new Vector2(transform.position.x + (Random.Range(-0.5f, 0.5f)), transform.position.y + (Random.Range(-0.5f, 0.5f))), Quaternion.identity);
                //        candyBag[2].CandyAmount--;
                //    }
                //    if (choosen == RWwant && candyBag[3].CandyAmount >= 0)
                //    {
                //        Instantiate(RWobj, new Vector2(transform.position.x + (Random.Range(-0.5f, 0.5f)), transform.position.y + (Random.Range(-0.5f, 0.5f))), Quaternion.identity);
                //        candyBag[3].CandyAmount--;
                //    }
                //    if (choosen == SPwant && candyBag[4].CandyAmount >= 0)
                //    {
                //        Instantiate(SPobj, new Vector2(transform.position.x + (Random.Range(-0.5f, 0.5f)), transform.position.y + (Random.Range(-0.5f, 0.5f))), Quaternion.identity);
                //        candyBag[4].CandyAmount--;
                //    }

                //}
            }

        }

        public void GenerateHorrorHyperGreed()
        {
            horror = 0;
            anger = 0;
            greed = Random.Range(1, 3);
        }

        public void SpecificSpeech(string text, int time)
        {
            DisplayText(text);
            DisplayTextTime(time);
        }

        public void JudasSpeak()
        {
            int i = Random.Range(1, 6);
            DisplayTextTime(120);
            if (i == 1)
            {
                DisplayText("Cat?");
            }
            if (i == 2)
            {
                DisplayText("Kitty!");
            }
            if (i == 3)
            {
                DisplayText("Hi Kitty!");
            }
            if (i == 4)
            {
                DisplayText("Look at that good boy");
            }
            if (i == 5)
            {
                DisplayText("Was that a cat?");
            }
        }

        public void activationThresholdGenerator()
        {
            activationThreshold = 9995 - (GameManager.me.score / 1000);
        }

        public void FillPrefBag()
        {
            for (int i = 0; i < 5; i++)
            {
                prefBag.Add(i + 1);
            }
        }

        public void GenerateCandy()
        {
            for (int i = 0; i < 5; i++)
            {
                candyBag[i].CandyAmount = Random.Range(0, 20);
            }
            GenerateCandyPref();
        }

        public void GenerateCandyPref()
        {
            for (int i = 0; i < 5; i++)
            {
                int j = Random.Range(0, prefBag.Count);
                candyBag[i].CandyPreference = prefBag[j];
                prefBag.Remove(prefBag[j]);
                for (int c = 0; c < prefBag.Count; c++)
                {
                    print(i + "," + prefBag[c]);
                }
            }
        }

        public void ActivateAgent()
        {
            if (isActive == false && Activated == false)
            {
                int randomChance = Random.Range(1, 10001);
                if (randomChance > activationThreshold)
                {
                    isActive = true;
                    Activated = true;
                }
            }

            if(isActive && scared)
            {
                isActive = false;
                Activated = true;
            }

        }

        public void ComponentGetter()
        {
            cam = Camera.main;
            rb = GetComponent<Rigidbody2D>();
            tm = GetComponentInChildren<TextMesh>();
            sr = GetComponent<SpriteRenderer>();
            at = GetComponent<AgentTerror>();
        }

        public void CheckIfTop()
        {
            if (transform.position.y > 0)
            {
                isTop = true;
            }
            else
            {
                isTop = false;
            }
        }

        public void DisplayTextTime(int i)
        {
            textTime = i;
        }

        public void DisplayText(string text)
        {
            tm.text = text;
        }

        public void TextTimer()
        {
            textTime--;
            if (textTime == 1)
            {
                textTime = 0;
                EndText();
            }
        }

        public void EndText()
        {
            tm.text = null;
        }

        public void Vector2Mypos()
        {
            pos = new Vector2(transform.position.x, transform.position.y);
        }

        public void Vector2MyMouse()
        {
            mousepos = cam.ScreenToWorldPoint(new Vector2(Input.mousePosition.x, Input.mousePosition.y));
        }

        public void GetCandyObj()
        {
            PP = GameObject.Find("PitPats");
            PPCS = PP.GetComponent<CandyStorage>();
            BB = GameObject.Find("Booster Bars");
            BBCS = BB.GetComponent<CandyStorage>();
            RW = GameObject.Find("Red and Whites");
            RWCS = RW.GetComponent<CandyStorage>();
            HS = GameObject.Find("Her-She's");
            HSCS = HS.GetComponent<CandyStorage>();
            SP = GameObject.Find("SmallPleasers");
            SPCS = SP.GetComponent<CandyStorage>();
        }
    }
}

[System.Serializable]
public struct CandyBag
{
    public string CandyName;
    public int CandyPreference;
    public int CandyAmount;
}
